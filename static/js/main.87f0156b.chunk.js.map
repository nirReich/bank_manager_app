{"version":3,"sources":["Components/Action.js","Components/Client.js","Components/Login.js","Components/Register.js","Components/Manager.js","Components/Editregister.js","App.js","serviceWorker.js","index.js"],"names":["Action","props","useState","amount","setAmount","comp","setComp","className","type","placeholder","onChange","e","target","value","Button","variant","onClick","addAction","index","Client","flag","setFlag","user","name","alert","money","to","passClientToEdit","showAction","LogIn","setUser","passWord","setPassWord","pickClient","Register","id","password","actions","newClient","setNewClient","passConf","setPassConf","setData","data","isNaN","toString","length","addClient","Manager","clients","map","element","clientIndex","Accordion","defaultActiveKey","Card","Header","Toggle","as","eventKey","Collapse","Body","actionIndex","company","removeAction","removeClient","clientEdit","client","setId","setName","setPassword","setMoney","editClient","App","setClients","setClientEdit","push","i","showActions","splice","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAGe,SAASA,EAAOC,GAAQ,IAAD,EAENC,mBAAS,IAFH,mBAE3BC,EAF2B,KAEnBC,EAFmB,OAGVF,mBAAS,IAHC,mBAG3BG,EAH2B,KAGrBC,EAHqB,KASlC,OACI,6BACI,wBAAIC,UAAU,WAAd,UACA,2BAAOC,KAAK,SAASC,YAAY,kBAAkBC,SAAU,SAACC,GAAQP,EAAUO,EAAEC,OAAOC,UACzF,6BACA,6BACA,2BAAOL,KAAK,OAAOC,YAAY,eAAeC,SAAU,SAACC,GAAQL,EAAQK,EAAEC,OAAOC,UAClF,6BACA,6BACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAS,WAAQf,EAAMgB,UAAUZ,EAAMF,EAAQF,EAAMiB,SAAvF,YCfG,SAASC,EAAOlB,GAAQ,IAAD,EACVC,oBAAS,GADC,mBAC3BkB,EAD2B,KACrBC,EADqB,KAWlC,OACI,6BACI,wBAAId,UAAU,WAAd,UAAgCN,EAAMqB,KAAKC,MAC3C,6BACA,kBAACT,EAAA,EAAD,CAAQP,UAAU,YAAYQ,QAAQ,kBAAkBC,QAAS,WAAQQ,MAAMvB,EAAMqB,KAAKG,SAA1F,iBACA,kBAACX,EAAA,EAAD,CAAQP,UAAU,YAAYQ,QAAQ,kBAAkBC,QAAS,WAAQK,GAASD,KAAlF,cACA,6BACA,kBAAC,IAAD,CAAMM,GAAI,KAAK,kBAACZ,EAAA,EAAD,CAAQP,UAAU,YAAYQ,QAAQ,mBAAtC,SACf,kBAAC,IAAD,CAAMW,GAAI,SAAS,kBAACZ,EAAA,EAAD,CAAQP,UAAU,YAAYQ,QAAQ,kBAAkBC,QAAS,WAAQ,OAAOf,EAAM0B,iBAAiB1B,EAAMiB,SAA7G,iBAfV,WACb,GAAIE,EACA,OAAO,kBAACpB,EAAD,CAAQiB,UAAWhB,EAAMgB,UAAWC,MAAOjB,EAAMiB,MAAOI,KAAMrB,EAAMqB,OAe1EM,ICvBE,SAASC,EAAM5B,GAAQ,IAAD,EACTC,mBAAS,IADA,mBAC1BoB,EAD0B,KACpBQ,EADoB,OAED5B,mBAAS,IAFR,mBAE1B6B,EAF0B,KAEhBC,EAFgB,KAqBjC,OACI,yBAAKzB,UAAU,aAEX,wBAAIA,UAAU,WAAd,eACA,6BACA,2BAAOC,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAACC,GAAQmB,EAAQnB,EAAEC,OAAOC,UAC/E,6BACA,6BACA,2BAAOL,KAAK,WAAWC,YAAY,WAAWC,SAAU,SAACC,GAAQqB,EAAYrB,EAAEC,OAAOC,UACtF,6BACA,6BACA,kBAAC,IAAD,CAAMa,GAAI,aAAa,kBAACZ,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,oBACvB,6BACA,6BA1BS,UAATO,GAAiC,UAAbS,EACb,kBAAC,IAAD,CAAML,GAAI,UAAU,kBAACZ,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,UAEtBd,EAAMgC,WAAWX,EAAMS,GACrB,kBAAC,IAAD,CAAML,GAAE,WAAMJ,IAAQ,kBAACR,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,UAEnB,kBAACD,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAS,WAAQQ,MAAM,qBAAzD,UCbP,SAASU,EAASjC,GAAQ,IAAD,EAEFC,mBAAS,CAAEiC,GAAI,GAAIZ,KAAM,GAAIa,SAAU,GAAIX,MAAO,GAAIY,QAAS,KAF7D,mBAE7BC,EAF6B,KAElBC,EAFkB,OAGJrC,mBAAS,IAHL,mBAG7BsC,EAH6B,KAGnBC,EAHmB,KAQhCC,EAAU,SAAC/B,GACX,IAAIgC,EAAOhC,EAAEC,OAAOC,MACA,OAAhBF,EAAEC,OAAOuB,GACLS,MAAMjC,EAAEC,OAAOC,OACfW,MAAM,iBAEHe,EAAa,2BAAKD,GAAN,IAAiBH,GAAIQ,KAGnB,SAAhBhC,EAAEC,OAAOuB,GAEdI,EAAa,2BAAKD,GAAN,IAAiBf,KAAMoB,KAGd,aAAhBhC,EAAEC,OAAOuB,GAEdI,EAAa,2BAAKD,GAAN,IAAiBF,SAAUO,KAGlB,iBAAhBhC,EAAEC,OAAOuB,GACdM,EAAYE,GAIZJ,EAAa,2BAAKD,GAAN,IAAiBb,MAAOkB,MA8B5C,OACI,6BACI,wBAAIpC,UAAU,WAAd,YACA,6BACA,2BAAOC,KAAK,OAAO2B,GAAG,KAAK1B,YAAY,KAAKC,SAAUgC,IACtD,6BACA,2BAAOlC,KAAK,OAAO2B,GAAG,OAAO1B,YAAY,YAAYC,SAAUgC,IAC/D,6BACA,2BAAOlC,KAAK,OAAO2B,GAAG,WAAW1B,YAAY,WAAWC,SAAUgC,IAClE,6BACA,2BAAOlC,KAAK,OAAO2B,GAAG,eAAe1B,YAAY,mBAAmBC,SAAUgC,IAC9E,6BACA,2BAAOlC,KAAK,OAAO2B,GAAG,QAAQ1B,YAAY,QAAQC,SAAUgC,IAC5D,6BACA,6BACA,kBAAC,IAAD,CAAMhB,GAAI,KAAV,IAAgB,kBAACZ,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAS,YAvCnC,IAAxB4B,MAAMN,EAAUH,KAAiBG,EAAUH,GAAGU,WAAWC,OAAS,EAClEtB,MAAM,0CAEDc,EAAUf,KAAKuB,OAAS,EAC7BtB,MAAM,uCAEDc,EAAUF,SAASU,OAAS,EACjCtB,MAAM,uCAEDc,EAAUF,WAAaI,EAC5BhB,MAAM,oCAEDoB,MAAMN,EAAUb,QAAUa,EAAUb,MAAQ,KAAWa,EAAUb,MAAQ,EAC9ED,MAAM,+CAGNvB,EAAM8C,UAAUT,KAuBA,WAChB,6BACA,6BACA,kBAAC,IAAD,CAAMZ,GAAI,KAAK,kBAACZ,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,U,oBC7EZ,SAASiC,EAAQ/C,GAAQ,IAAD,EAEXC,mBAAS,GAFE,mBAE5BkB,EAF4B,UAKnC,OACI,yBAAKb,UAAU,aAEX,wBAAIA,UAAU,WAAd,WACCN,EAAMgD,QAAQC,KAAI,SAACC,EAASC,GACzB,OAAO,kBAACC,EAAA,EAAD,CAAWC,iBAAiB,KAC/B,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,KACI,2BAAKL,EAAQ5B,MACb,+BAAM4B,EAAQhB,IACd,kBAACkB,EAAA,EAAUI,OAAX,CAAkBC,GAAI5C,IAAQC,QAAQ,OAAO4C,SAAUvC,GACnD,4BAAQb,UAAU,cAG1B,kBAAC8C,EAAA,EAAUO,SAAX,CAAoBD,SAAUvC,GAC1B,kBAACmC,EAAA,EAAKM,KAAN,KAEKV,EAAQd,QAAQa,KAAI,SAACC,EAASW,GAC3B,OAEI,yBAAKvD,UAAU,YACX,yBAAKA,UAAU,OAAO4C,EAAQY,SAC9B,yBAAKxD,UAAU,OAAO4C,EAAQhD,QAC9B,yBAAKI,UAAU,OAAM,kBAACO,EAAA,EAAD,CAAQC,QAAQ,iBAAiBC,QAAS,WAAQf,EAAM+D,aAAaZ,EAAaU,KAAlF,MAArB,SAKZ,yBAAKvD,UAAU,OAAM,kBAACO,EAAA,EAAD,CAAQC,QAAQ,iBAAiBR,UAAU,YAAYS,QAAS,WAAQf,EAAMgE,aAAab,KAA3F,kBAQzC,6BACA,kBAAC,IAAD,CAAM1B,GAAI,KAAV,KAAiB,kBAACZ,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,UC9Cd,SAASmB,EAASjC,GAAQ,IAAD,EAEhBC,mBAASD,EAAMiE,WAAWC,OAAOhC,IAFjB,mBAE7BA,EAF6B,KAEzBiC,EAFyB,OAGZlE,mBAASD,EAAMiE,WAAWC,OAAO5C,MAHrB,mBAG7BA,EAH6B,KAGvB8C,EAHuB,OAIJnE,mBAASD,EAAMiE,WAAWC,OAAO/B,UAJ7B,mBAI7BA,EAJ6B,KAInBkC,EAJmB,OAKVpE,mBAASD,EAAMiE,WAAWC,OAAO1C,OALvB,mBAK7BA,EAL6B,KAKtB8C,EALsB,KA2BpC,OACI,6BACI,wBAAIhE,UAAU,WAAd,gBACA,6BAFJ,MAGO,2BAAOA,UAAU,UAAUC,KAAK,OAAO2B,GAAG,KAAKtB,MAAOsB,EAAIzB,SAAU,SAACC,GAAQyD,EAAMzD,EAAEC,OAAOC,UAC/F,6BAJJ,SAKU,2BAAON,UAAU,UAAUC,KAAK,OAAO2B,GAAG,OAAOtB,MAAOU,EAAMb,SAAU,SAACC,GAAQ0D,EAAQ1D,EAAEC,OAAOC,UACxG,6BANJ,aAOc,2BAAON,UAAU,UAAUC,KAAK,OAAO2B,GAAG,WAAWtB,MAAOuB,EAAU1B,SAAU,SAACC,GAAQ2D,EAAY3D,EAAEC,OAAOC,UACxH,6BARJ,SASU,2BAAON,UAAU,UAAUC,KAAK,OAAO2B,GAAG,QAAQtB,MAAOY,EAAOf,SAAU,SAACC,GAAQ4D,EAAS5D,EAAEC,OAAOC,UAC3G,6BACA,kBAAC,IAAD,CAAMa,GAAI,KAAV,IAAgB,kBAACZ,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAS,YA9B7C,IAAd4B,MAAMT,IAAiBA,EAAGU,WAAWC,OAAS,EAC9CtB,MAAM,0CAEDD,EAAKuB,OAAS,EACnBtB,MAAM,uCAEDY,EAASU,OAAS,EACvBtB,MAAM,uCAEDoB,MAAMnB,IAAUA,EAAQ,KAAWA,EAAQ,EAChDD,MAAM,+CAGNvB,EAAMuE,WAAWrC,EAAIZ,EAAMa,EAAUX,EAAOxB,EAAMiE,WAAWhD,SAiB7C,SAChB,6BACA,6BACF,kBAAC,IAAD,CAAMQ,GAAE,WAAMzB,EAAMiE,WAAWC,OAAO5C,OAAtC,KAAgD,kBAACT,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,U,MClC3C,SAAS0D,IAAM,MAEEvE,mBAAS,CACrC,CAAEiC,GAAI,YAAaZ,KAAM,YAAaa,SAAU,SAAUX,MAAO,QAASY,QAAS,CAAC,CAAE0B,QAAS,YAAa5D,OAAQ,OAAS,CAAE4D,QAAS,QAAS5D,OAAQ,SACzJ,CAAEgC,GAAI,YAAaZ,KAAM,cAAea,SAAU,SAAUX,MAAO,QAASY,QAAS,CAAC,CAAE0B,QAAS,SAAU5D,OAAQ,OAAS,CAAE4D,QAAS,SAAU5D,OAAQ,WAJ/H,mBAErB8C,EAFqB,KAEZyB,EAFY,OAMQxE,mBAAS,CAAEiE,OAAQ,GAAIjD,MAAO,KANtC,mBAMrBgD,EANqB,KAMTS,EANS,KAStB5B,EAAY,SAACT,GACjBoC,EAAW,GAAD,mBAAKzB,GAAL,gBAAmBX,OAGzBrB,EAAY,SAACZ,EAAMF,EAAQe,GAC/B+B,EAAQ/B,GAAOmB,QAAQuC,KAAK,CAAEb,QAAS1D,EAAMF,OAAQA,IACrDuE,EAAW,YAAIzB,KAIXhB,EAAa,SAACX,EAAMc,GACxB,IAAK,IAAIyC,EAAI,EAAGA,EAAI5B,EAAQH,OAAQ+B,IAElC,GAAI5B,EAAQ4B,GAAGtD,OAASD,GAAQ2B,EAAQ4B,GAAGzC,WAAaA,EACtD,OAAO,EAGX,OAAO,GAGH0C,EAAc,SAACD,GAEnB,OAAO5B,EAAQ4B,GAAGxC,QAAQa,KAAI,SAACvC,GAAQ,OAAOA,EAAEoD,YAI5CpC,EAAmB,SAACkD,GAExBF,EAAc,CAAER,OAAQlB,EAAQ4B,GAAI3D,MAAO2D,KAGvCL,EAAa,SAACrC,EAAIZ,EAAMa,EAAUX,EAAOP,GAE7C+B,EAAQ/B,GAAOiB,GAAKA,EACpBc,EAAQ/B,GAAOK,KAAOA,EACtB0B,EAAQ/B,GAAOkB,SAAWA,EAC1Ba,EAAQ/B,GAAOO,MAAQA,EACvBiD,EAAW,YAAIzB,KAIXe,EAAe,SAACZ,EAAaU,GACjCb,EAAQG,GAAaf,QAAQ0C,OAAOjB,EAAa,GACjDY,EAAW,YAAIzB,KAGXgB,EAAe,SAAC/C,GAEpB+B,EAAQ8B,OAAO7D,EAAO,GACtBwD,EAAW,YAAIzB,KAKjB,OACE,yBAAK1C,UAAU,OACb,kBAAC,IAAD,KAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyE,OAAK,EAACC,KAAM,IAAKC,UAAW,WAAQ,OAAO,kBAAC,EAAD,CAAOjC,QAASA,EAAShB,WAAYA,OAEtFgB,EAAQC,KAAI,SAACvC,EAAGkE,GAAQ,OAAO,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAI,WAAMtE,EAAEY,MAAQ2D,UAAW,WAAQ,OAAO,kBAAC/D,EAAD,CAAQF,UAAWA,EAAWK,KAAM2B,EAAQ4B,GAAI3D,MAAO2D,EAAGlD,iBAAkBA,UAEvK,kBAAC,IAAD,CAAOqD,OAAK,EAACC,KAAM,YAAaC,UAAW,WAAQ,OAAO,kBAAChD,EAAD,CAAUa,UAAWA,OAC/E,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAM,QAASC,UAAW,WAAQ,OAAO,kBAAC,EAAD,CAAcV,WAAYA,EAAYN,WAAYA,EAAYnB,UAAWA,OAC/H,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAM,SAAUC,UAAW,WAAQ,OAAO,kBAAClC,EAAD,CAASiB,aAAcA,EAAcD,aAAcA,EAAcf,QAASA,EAAS6B,YAAaA,UC1E7IK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.87f0156b.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nexport default function Action(props) {\r\n\r\n    const [amount, setAmount] = useState('');\r\n    const [comp, setComp] = useState('');\r\n\r\n\r\n\r\n\r\n    //-------------------------------\r\n    return (\r\n        <div>\r\n            <h3 className=\"headers\">Action</h3>\r\n            <input type=\"number\" placeholder=\"Perceuse amount\" onChange={(e) => { setAmount(e.target.value) }} />\r\n            <br />\r\n            <br/>\r\n            <input type=\"text\" placeholder=\"Company name\" onChange={(e) => { setComp(e.target.value) }} />\r\n            <br />\r\n            <br/>\r\n            <Button variant=\"outline-success\" onClick={() => { props.addAction(comp, amount, props.index) }}>confirm</Button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport Action from './Action';\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n//propsname=props.user,index\r\nexport default function Client(props) {\r\n    const [flag, setFlag] = useState(false);\r\n\r\n\r\n    let showAction = () => {\r\n        if (flag) {\r\n            return <Action addAction={props.addAction} index={props.index} user={props.user} />\r\n        }\r\n    }\r\n\r\n    //----------------------------------------------- \r\n    return (\r\n        <div>\r\n            <h1 className=\"headers\">welcom {props.user.name}</h1>\r\n            <br />\r\n            <Button className=\"clientBtn\" variant=\"outline-success\" onClick={() => { alert(props.user.money) }}>Chack Balance</Button>\r\n            <Button className=\"clientBtn\" variant=\"outline-success\" onClick={() => { setFlag(!flag) }}>Add Action</Button>\r\n            <br />\r\n            <Link to={'/'}><Button className=\"clientBtn\" variant=\"outline-primary\">Exit</Button></Link>\r\n            <Link to={'/edit'}><Button className=\"clientBtn\" variant=\"outline-primary\" onClick={() => { return props.passClientToEdit(props.index) }}>Edit Profile</Button></Link>\r\n\r\n            {showAction()}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nexport default function LogIn(props) {\r\n    const [user, setUser] = useState('');\r\n    const [passWord, setPassWord] = useState('');\r\n    \r\n\r\n\r\n    const setTheLink = () => {//handels the enter button\r\n\r\n        if (user === 'admin' && passWord === 'admin') {\r\n            return <Link to={'/admin'}><Button variant=\"outline-success\">enter</Button></Link>\r\n        }\r\n        else if (props.pickClient(user, passWord)) {\r\n            return <Link to={`/${user}`}><Button variant=\"outline-success\">enter</Button></Link>\r\n        }\r\n        else { return <Button variant=\"outline-success\" onClick={() => { alert('User not found!') }}>enter</Button> }\r\n\r\n\r\n\r\n    }\r\n    \r\n    //---------------------------------------\r\n    return (\r\n        <div className=\"container\">\r\n\r\n            <h1 className=\"headers\">Banking App</h1>\r\n            <br />\r\n            <input type=\"text\" placeholder=\"user name\" onChange={(e) => { setUser(e.target.value) }} />\r\n            <br />\r\n            <br/>\r\n            <input type=\"Password\" placeholder=\"password\" onChange={(e) => { setPassWord(e.target.value) }} />\r\n            <br />\r\n            <br/>\r\n            <Link to={'/register'}><Button variant=\"outline-primary\">Create New User</Button></Link>\r\n            <br />\r\n            <br />\r\n            {setTheLink()}\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n\r\nexport default function Register(props) {\r\n\r\n    const [newClient, setNewClient] = useState({ id: '', name: '', password: '', money: '', actions: [] });\r\n    const [passConf, setPassConf] = useState('')\r\n\r\n\r\n\r\n\r\n    let setData = (e) => {\r\n        let data = e.target.value\r\n        if (e.target.id === \"id\") {\r\n            if (isNaN(e.target.value)) {\r\n                alert('numbers only!')\r\n            }\r\n            else { setNewClient({ ...newClient, id: data }) }\r\n\r\n        }\r\n        else if (e.target.id === \"name\") {\r\n\r\n            setNewClient({ ...newClient, name: data })\r\n\r\n        }\r\n        else if (e.target.id === 'password') {\r\n\r\n            setNewClient({ ...newClient, password: data })\r\n\r\n        }\r\n        else if (e.target.id === \"passwordConf\") {\r\n            setPassConf(data)\r\n        }\r\n        else {\r\n\r\n            setNewClient({ ...newClient, money: data })\r\n\r\n        }\r\n    }\r\n\r\n    let sendClient = () => {\r\n        if (isNaN(newClient.id) === false && newClient.id.toString().length < 9) {\r\n            alert('i.d length must be 9 and numbers only!')\r\n        }\r\n        else if (newClient.name.length < 4) {\r\n            alert('name must be longer then 4 letters!')\r\n        }\r\n        else if (newClient.password.length < 6) {\r\n            alert('password must be at least 6 letters')\r\n        }\r\n        else if (newClient.password !== passConf) {\r\n            alert('password not same with confirme!')\r\n        }\r\n        else if (isNaN(newClient.money) || newClient.money > 1000000 || newClient.money < 0) {\r\n            alert('money amount must be between 0 and 1000000!')\r\n        }\r\n        else {\r\n            props.addClient(newClient)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    //----------------------------------------------------\r\n    return (\r\n        <div>\r\n            <h1 className=\"headers\">REGISTER</h1>\r\n            <br />\r\n            <input type=\"text\" id=\"id\" placeholder=\"id\" onChange={setData} />\r\n            <br />\r\n            <input type=\"text\" id=\"name\" placeholder=\"user name\" onChange={setData} />\r\n            <br />\r\n            <input type=\"text\" id=\"password\" placeholder=\"Password\" onChange={setData} />\r\n            <br />\r\n            <input type=\"text\" id=\"passwordConf\" placeholder=\"Confirm password\" onChange={setData} />\r\n            <br />\r\n            <input type=\"text\" id=\"money\" placeholder=\"Money\" onChange={setData} />\r\n            <br />\r\n            <br/>\r\n            <Link to={'/'}> <Button variant=\"outline-success\" onClick={() => { sendClient() }}>Create</Button></Link>\r\n            <br/>\r\n            <br/>\r\n            <Link to={'/'}><Button variant=\"outline-primary\">Back</Button></Link>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport Card from 'react-bootstrap/Card'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n\r\n\r\nexport default function Manager(props) {\r\n    \r\n    const [flag, setFlag] = useState(1)\r\n\r\n    //---------------------------------------------------------------\r\n    return (\r\n        <div className=\"container\">\r\n\r\n            <h1 className=\"headers\">MANAGER</h1>\r\n            {props.clients.map((element, clientIndex) => {\r\n                return <Accordion defaultActiveKey=\"0\">\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <p >{element.name}</p>\r\n                            <p > {element.id}</p>\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey={flag}>\r\n                                <button className=\"showBtn\"></button>\r\n                            </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey={flag}>\r\n                            <Card.Body>\r\n\r\n                                {element.actions.map((element, actionIndex) => {\r\n                                    return (\r\n\r\n                                        <div className=\"row mb-2\">\r\n                                            <div className=\"col\">{element.company}</div>\r\n                                            <div className=\"col\">{element.amount}</div>\r\n                                            <div className=\"col\"><Button variant=\"outline-danger\" onClick={() => { props.removeAction(clientIndex, actionIndex) }}>X </Button> </div>\r\n\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                                <div className=\"row\"><Button variant=\"outline-danger\" className=\"cancelBtn\" onClick={() => { props.removeClient(clientIndex) }}>Cancel</Button></div>\r\n\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                </Accordion>\r\n            })}\r\n\r\n            <br />\r\n            <Link to={'/'}>  <Button variant=\"outline-primary\">Exit</Button></Link>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nexport default function Register(props) {\r\n\r\n    const [id, setId] = useState(props.clientEdit.client.id);\r\n    const [name, setName] = useState(props.clientEdit.client.name);\r\n    const [password, setPassword] = useState(props.clientEdit.client.password);\r\n    const [money, setMoney] = useState(props.clientEdit.client.money);\r\n\r\n\r\n    let editClient = () => {//validation and if OK send it to clients list\r\n        if (isNaN(id) === false && id.toString().length < 9) {\r\n            alert('i.d length must be 9 and numbers only!')\r\n        }\r\n        else if (name.length < 4) {\r\n            alert('name must be longer then 4 letters!')\r\n        }\r\n        else if (password.length < 6) {\r\n            alert('password must be at least 6 letters')\r\n        }\r\n        else if (isNaN(money) || money > 1000000 || money < 0) {\r\n            alert('money amount must be between 0 and 1000000!')\r\n        }\r\n        else {\r\n            props.editClient(id, name, password, money, props.clientEdit.index)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"headers\">EDIT DETAILS</h1>\r\n            <br />\r\n            id:<input className=\"editInp\" type=\"text\" id=\"id\" value={id} onChange={(e) => { setId(e.target.value) }} />\r\n            <br />\r\n            name: <input className=\"editInp\" type=\"text\" id=\"name\" value={name} onChange={(e) => { setName(e.target.value) }} />\r\n            <br />\r\n            password: <input className=\"editInp\" type=\"text\" id=\"password\" value={password} onChange={(e) => { setPassword(e.target.value) }} />\r\n            <br />\r\n            money:<input className=\"editInp\" type=\"text\" id=\"money\" value={money} onChange={(e) => { setMoney(e.target.value) }} />\r\n            <br />\r\n            <Link to={'/'}> <Button variant=\"outline-primary\" onClick={() => { editClient() }}>Edit</Button></Link>\r\n            <br/>\r\n            <br/>\r\n          <Link to={`/${props.clientEdit.client.name}`}>  <Button variant=\"outline-primary\">Back</Button></Link>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Client from './Components/Client';\nimport Login from './Components/Login'\nimport Register from './Components/Register';\nimport Manager from './Components/Manager'\nimport Editregister from './Components/Editregister'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\n\nexport default function App() {\n//hooks\n  const [clients, setClients] = useState([\n    { id: '123456789', name: 'nir reich', password: '111111', money: '10000', actions: [{ company: 'shufersal', amount: '500' }, { company: 'sonol', amount: '250' }] },\n    { id: '987654321', name: 'johnny amir', password: '222222', money: '20000', actions: [{ company: 'pazgas', amount: '150' }, { company: 'castro', amount: '400' },] }\n  ])\n  const [clientEdit, setClientEdit] = useState({ client: '', index: '' });\n\n//methods\n  const addClient = (newClient) => {//add new client. from register comp\n    setClients([...clients, { ...newClient }])\n  }\n\n  const addAction = (comp, amount, index) => {//adds new action. from client comp\n    clients[index].actions.push({ company: comp, amount: amount })\n    setClients([...clients]);\n\n  }\n\n  const pickClient = (user, password) => {//pick the spc client from clients for the login page\n    for (let i = 0; i < clients.length; i++) {\n\n      if (clients[i].name === user && clients[i].password === password) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const showActions = (i) => {//show action list on manager page\n\n    return clients[i].actions.map((e) => { return e.company })\n\n  }\n\n  const passClientToEdit = (i) => {//pick spc client to edit\n\n    setClientEdit({ client: clients[i], index: i });\n  }\n\n  const editClient = (id, name, password, money, index) => {// edit the client changes sent from edit page\n\n    clients[index].id = id\n    clients[index].name = name\n    clients[index].password = password\n    clients[index].money = money\n    setClients([...clients])\n\n  }\n\n  const removeAction = (clientIndex, actionIndex) => {//remove the actions from theclient list. from manager page\n    clients[clientIndex].actions.splice(actionIndex, 1)\n    setClients([...clients]);\n  }\n\n  const removeClient = (index) => {// remove client from clients list. from manager page.\n\n    clients.splice(index, 1)\n    setClients([...clients]);\n  }\n\n\n  //------------------------------------------------------------------------------\n  return (\n    <div className=\"App\">\n      <Router>\n\n        <Switch>\n          <Route exact path={'/'} component={() => { return <Login clients={clients} pickClient={pickClient} /> }} />\n\n          {clients.map((e, i) => { return <Route exact path={`/${e.name}`} component={() => { return <Client addAction={addAction} user={clients[i]} index={i} passClientToEdit={passClientToEdit} /> }} /> })}\n\n          <Route exact path={'/register'} component={() => { return <Register addClient={addClient} /> }} />\n          <Route exact path={'/edit'} component={() => { return <Editregister editClient={editClient} clientEdit={clientEdit} addClient={addClient} /> }} />\n          <Route exact path={'/admin'} component={() => { return <Manager removeClient={removeClient} removeAction={removeAction} clients={clients} showActions={showActions} /> }} />\n\n        </Switch>\n      </Router>\n\n    </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}